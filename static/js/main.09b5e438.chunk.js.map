{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","state/taskReducer.ts","Todolist.tsx","state/todolistsReducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","TextField","id","label","variant","size","helperText","value","onChange","e","currentTarget","onKeyPress","key","trim","callBack","className","Button","style","maxWidth","maxHeight","minWidth","minHeight","onClick","onClickAddTaskHandler","EditableSpan","editMode","setEditMode","titleInput","setTitleInput","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","post","todolistId","delete","put","taskId","model","Task","task","removeTask","changeStatus","updateTask","status","Completed","type","checked","newIsDoneValue","New","onChangeStatusHandler","updateTaskHandler","IconButton","aria-label","Delete","initialState","Todolist","dispatch","useDispatch","useEffect","todolistID","then","res","tasks","data","items","setTasksAC","changeFilterOnClickHandler","useCallback","changeFilter","addTaskHandler","addTask","tasksForTodolist","filter","f","updateTitleTodolist","removeTodolist","map","t","AppWithRedux","todolists","useSelector","state","getState","item","addTaskAC","addTaskTC","currentTask","find","description","priority","deadline","startDate","changeStatusTaskAC","changeStatusTC","changeTitleTaskAC","updateTaskTitleTC","changeFilterAC","addTodolist","todolist","addTodolistTC","updateTitleTodolistAC","updateTitleTodolistTC","m","Grid","paddingTop","Paper","padding","rootReducer","combineReducers","action","todoListId","newState","copyState","forEach","tl","newTodolist","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.09b5e438.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3ffd8bee-6a2a-4b2d-9367-b8070697f4c5'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})\r\n\r\n\r\nexport const todolistApi = {\r\n    getTodos() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\")\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<BaseTodolistType<{ item: TodolistType }>>(\"todo-lists\", {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<BaseTodolistType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<BaseTodolistType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTaskResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<BaseTaskType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateModelTaskType) {\r\n        return instance.put<BaseTaskType<{ item: UpdateModelTaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`,\r\n            model)\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<BaseTaskType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype BaseTodolistType<T = {}> = {\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    resultCode: number\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTaskResponseType = {\r\n    items: Array<TaskType>\r\n    error: null | string\r\n    totalCount: number\r\n}\r\n\r\nexport type UpdateModelTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\n\r\ntype BaseTaskType<T = {}> = {\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    resultCode: number\r\n    data: T\r\n}\r\n\r\n// type CreateTaskType = {\r\n//     fieldsErrors: Array<string>\r\n//     messages: Array<string>\r\n//     resultCode: number\r\n//     data: { item: TaskType }\r\n// }\r\n//\r\n// type UpdateTaskType = {\r\n//     fieldsErrors: Array<string>\r\n//     messages: Array<string>\r\n//     resultCode: number\r\n//     data: { item: UpdateModelTaskType }\r\n// }\r\n//\r\n// type DeleteTaskType = {\r\n//     fieldsErrors: Array<string>\r\n//     messages: Array<string>\r\n//     resultCode: number\r\n//     data: {}\r\n// }\r\n\r\n\r\n\r\n","import {Button, TextField} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    let [error, setError] = useState<null | string>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) setError(\"\")\r\n        if (e.key === \"Enter\" && title.trim() !== \"\") {\r\n            props.callBack(title)\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n\r\n    const onClickAddTaskHandler = (title: string) => {\r\n        if (title.trim() !== \"\") {\r\n            props.callBack(title)\r\n            setTitle(\"\")\r\n        }\r\n        else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<input*/}\r\n            {/*    value={title}*/}\r\n            {/*    onChange={onChangeHandler}*/}\r\n            {/*    onKeyPress={onKeyPressHandler}*/}\r\n            {/*    className={error ? 'error' : \"\"}*/}\r\n            {/*/>*/}\r\n\r\n            <TextField id=\"outlined-basic\"\r\n                       label=\"Title\"\r\n                       variant=\"outlined\"\r\n                       size=\"small\"\r\n                       helperText={error}\r\n                       error={!!error}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={error ? 'error' : \"\"}\r\n            />\r\n\r\n            {/*<button onClick={() => onClickAddTaskHandler(title)}>+</button>*/}\r\n            <Button\r\n                variant=\"outlined\"\r\n                style={{maxWidth: \"30px\", maxHeight: \"30px\", minWidth: \"30px\", minHeight: \"30px\"}}\r\n                onClick={() => onClickAddTaskHandler(title)}>+</Button>\r\n            {/*{error ? <div className='error-message'>{error}</div> : \"\"}*/}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [titleInput, setTitleInput] = useState(props.title)\r\n\r\n    const editModeTrueHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const editModeFalseHandler = () => {\r\n        setEditMode(false)\r\n        props.callBack(titleInput)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitleInput(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.callBack(titleInput)\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input value={titleInput}\r\n                     onChange={onChangeHandler}\r\n                     autoFocus\r\n                     onBlur={editModeFalseHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n\r\n            />\r\n            : <span onDoubleClick={editModeTrueHandler}>{props.title}</span>\r\n\r\n    )\r\n})","import {EditableSpan} from \"./EditableSpan\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {TaskStatuses, TaskType} from \"../api/todolist-api\";\r\n\r\n\r\ntype TasksPropsType = {\r\n    task: TaskType\r\n    removeTask: (id: string) => void\r\n    changeStatus: (status: TaskStatuses, id: string) => void\r\n    updateTask: (id: string, title: string) => void\r\n\r\n}\r\n\r\nexport const Task = React.memo(({task, removeTask, changeStatus, updateTask}: TasksPropsType) => {\r\n\r\n    const onClickRemoveTask = (id: string) => {\r\n        removeTask(id)\r\n    }\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>, id: string) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeStatus(newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, id)\r\n    }\r\n\r\n    const updateTaskHandler = (id: string, title: string) => {\r\n        updateTask(id, title)\r\n    }\r\n\r\n    return (\r\n        <li key={task.id}>\r\n\r\n            <input\r\n                className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n                type=\"checkbox\"\r\n                checked={task.status === TaskStatuses.Completed}\r\n                onChange={(e) => onChangeStatusHandler(e, task.id)}\r\n\r\n            />\r\n\r\n\r\n            <EditableSpan title={task.title} callBack={(title: string) => updateTaskHandler(task.id, title)}/>\r\n            {/*<button onClick={() => onClickRemoveTask(task.id)}>X</button>*/}\r\n            <IconButton aria-label=\"delete\">\r\n                <Delete onClick={() => onClickRemoveTask(task.id)}/>\r\n            </IconButton>\r\n\r\n        </li>)\r\n})\r\n\r\n","import {AddTodolistAT, RemoveTodolistAT, SetTodolistsAT} from \"./todolistsReducer\";\r\nimport {TaskStatuses, TaskType, todolistApi, UpdateModelTaskType} from \"../api/todolist-api\";\r\nimport {TasksStateType} from \"../App\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n\r\nexport type ActionType = RemoveTaskAT\r\n    | AddTaskAT\r\n    | ChangeStatusTaskAT\r\n    | ChangeTitleTaskAT\r\n    | AddTodolistAT\r\n    | RemoveTodolistAT\r\n    | SetTodolistsAT\r\n    | SetTasksAT\r\n\r\nexport type RemoveTaskAT = {\r\n    type: \"REMOVE-TASK\"\r\n    id: string\r\n    todolistID: string\r\n}\r\n\r\nexport type AddTaskAT = ReturnType<typeof addTaskAC>\r\n\r\nexport type ChangeStatusTaskAT = {\r\n    type: \"CHANGE-STATUS-TASK\",\r\n    status: TaskStatuses\r\n    id: string\r\n    todolistID: string\r\n}\r\n\r\nexport type ChangeTitleTaskAT = {\r\n    type: \"CHANGE-TITLE-TASK\",\r\n    title: string\r\n    id: string\r\n    todolistID: string\r\n}\r\n\r\nexport type SetTasksAT = ReturnType<typeof setTasksAC>\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            return ({...state, [action.todolistID]: state[action.todolistID].filter(f => f.id !== action.id)})\r\n        }\r\n\r\n        case \"ADD-TASK\": {\r\n            return ({...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]})\r\n        }\r\n\r\n        case \"CHANGE-STATUS-TASK\": {\r\n            return {\r\n                ...state, [action.todolistID]: state[action.todolistID].map\r\n                (m => m.id === action.id ? {...m, status: action.status} : m)\r\n            }\r\n        }\r\n\r\n        case \"CHANGE-TITLE-TASK\": {\r\n            return ({\r\n                ...state, [action.todolistID]: state[action.todolistID].map\r\n                (m => m.id === action.id ? {...m, title: action.title} : m)\r\n            })\r\n        }\r\n\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.todolist.id]: []}\r\n        }\r\n\r\n        case \"REMOVE-TODOLIST\": {\r\n            let newState = {...state}\r\n            delete newState[action.todolistID]\r\n            return newState\r\n        }\r\n\r\n        case \"SET-TODOLISTS\": {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                return (\r\n                    copyState[tl.id] = []\r\n                )\r\n            })\r\n            return copyState\r\n        }\r\n\r\n        case \"SET-TASKS\": {\r\n            let copyState = {...state}\r\n            copyState[action.todolistId] = action.tasks\r\n            return copyState\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (id: string, todolistID: string): RemoveTaskAT => {\r\n    return {\r\n        type: \"REMOVE-TASK\",\r\n        id,\r\n        todolistID\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: \"ADD-TASK\",\r\n        task\r\n    } as const\r\n}\r\n\r\nexport const changeStatusTaskAC = (todolistID: string, id: string, status: TaskStatuses): ChangeStatusTaskAT => {\r\n    return {\r\n        type: \"CHANGE-STATUS-TASK\",\r\n        status,\r\n        id,\r\n        todolistID\r\n    }\r\n}\r\n\r\nexport const changeTitleTaskAC = (todolistID: string, id: string, title: string): ChangeTitleTaskAT => {\r\n    return {\r\n        type: \"CHANGE-TITLE-TASK\",\r\n        todolistID,\r\n        id,\r\n        title\r\n    }\r\n}\r\n\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: \"SET-TASKS\",\r\n        todolistId,\r\n        tasks\r\n    } as const\r\n}\r\n\r\nexport const setTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistApi.getTasks(todolistId)\r\n        .then((res) => {\r\n            let tasks = res.data.items\r\n            dispatch(setTasksAC(todolistId, tasks))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    todolistApi.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistApi.createTask(todolistId, title)\r\n        .then((res) => {\r\n            let task = res.data.data.item\r\n            dispatch(addTaskAC(task))\r\n        })\r\n}\r\n\r\nexport const updateTaskTitleTC = (todolistId: string, taskId: string, title: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        let currentTask = getState().tasks[todolistId].find(f => (f.id === taskId ? taskId : \"\"))\r\n        if (currentTask) {\r\n            const model: UpdateModelTaskType = {\r\n                title: title,\r\n                description: currentTask.description,\r\n                status: currentTask.status,\r\n                priority: currentTask.priority,\r\n                deadline: currentTask.deadline,\r\n                startDate: currentTask.startDate\r\n            }\r\n\r\n            todolistApi.updateTask(todolistId, taskId, model)\r\n                .then(() => {\r\n                    dispatch(changeTitleTaskAC(todolistId, taskId, title))\r\n                })\r\n        }\r\n    }\r\n\r\nexport const changeStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        let currentTask = getState().tasks[todolistId].find(f => (f.id === taskId ? taskId : \"\"))\r\n        if (currentTask) {\r\n            const model: UpdateModelTaskType = {\r\n                title: currentTask.title,\r\n                description: currentTask.description,\r\n                status: status,\r\n                priority: currentTask.priority,\r\n                deadline: currentTask.deadline,\r\n                startDate: currentTask.startDate\r\n            }\r\n            todolistApi.updateTask(todolistId, taskId, model)\r\n                .then(() => {\r\n                    dispatch(changeStatusTaskAC(todolistId, taskId, status))\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Task} from \"./components/Task\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\nimport {filterType} from \"./state/todolistsReducer\";\r\nimport {setTasksTC} from \"./state/taskReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport type TodolistPropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeFilter: (value: filterType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeStatus: (todolistID: string, id: string, status: TaskStatuses) => void\r\n    filter: filterType\r\n    todolistID: string\r\n    updateTask: (todolistID: string, id: string, title: string) => void\r\n    updateTitleTodolist: (title: string, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n}\r\n\r\n// export type TaskPropsType = {\r\n//     id: string\r\n//     title: string\r\n//     isDone: boolean\r\n// }\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=> {\r\n       dispatch(setTasksTC(props.todolistID))\r\n    }, [])\r\n\r\n    const changeFilterOnClickHandler = useCallback((value: filterType, todolistID: string) => {\r\n        props.changeFilter(value, todolistID)\r\n    }, [props.changeFilter])\r\n\r\n    // let [error, setError]=useState<null | string>(null)\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        props.addTask(title, props.todolistID)\r\n    }, [props.addTask, props.todolistID])\r\n\r\n    const updateTitleTodolistHandler = (title: string) => {\r\n        props.updateTitleTodolist(title, props.todolistID)\r\n    }\r\n\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.todolistID)\r\n    }\r\n\r\n    const removeTask = useCallback((id: string) => {\r\n        props.removeTask(id, props.todolistID)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((status: TaskStatuses, id: string) => {\r\n        props.changeStatus(props.todolistID, id, status)\r\n    }, [])\r\n\r\n    const updateTask = useCallback((id: string, title: string) => {\r\n        props.updateTask(props.todolistID, id, title)\r\n    }, [])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => TaskStatuses.New)\r\n    }\r\n\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h3>\r\n                <EditableSpan title={props.title} callBack={updateTitleTodolistHandler}/>\r\n\r\n                <IconButton aria-label=\"delete\">\r\n                    <Delete onClick={removeTodolistHandler}/>\r\n                </IconButton>\r\n                {/*<button onClick={removeTodolistHandler}>X</button>*/}\r\n                {/*{props.title}*/}\r\n            </h3>\r\n\r\n            <AddItemForm callBack={addTaskHandler}/>\r\n\r\n            <ul>\r\n                {tasksForTodolist.map(t => <Task\r\n                    key={t.id}\r\n                    task={t}\r\n                    removeTask={removeTask}\r\n                    changeStatus={changeStatus}\r\n                    updateTask={updateTask}\r\n                />)\r\n\r\n                }\r\n            </ul>\r\n\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                        onClick={() => changeFilterOnClickHandler('all', props.todolistID)}>\r\n                    All\r\n                </Button>\r\n                <Button variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        onClick={() => changeFilterOnClickHandler('active', props.todolistID)}>\r\n                    Active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        onClick={() => changeFilterOnClickHandler('completed', props.todolistID)}>\r\n                    Completed\r\n                </Button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import {todolistApi, TodolistType} from \"../api/todolist-api\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport type ActionType = RemoveTodolistAT\r\n    | AddTodolistAT\r\n    | ChangeFilterAT\r\n    | UpdateTitleTodolistAT\r\n    | SetTodolistsAT\r\n\r\nexport type RemoveTodolistAT = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    todolistID: string\r\n}\r\n\r\nexport type AddTodolistAT = ReturnType<typeof addTodolistAC>\r\n\r\nexport type ChangeFilterAT = {\r\n    type: \"CHANGE-FILTER-TODOLIST\"\r\n    value: filterType\r\n    todolistID: string\r\n}\r\n\r\nexport type UpdateTitleTodolistAT = {\r\n    type: \"UPDATE-TITLE-TODOLIST\"\r\n    title: string\r\n    todolistID: string\r\n}\r\n\r\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\r\n\r\nexport type filterType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: filterType\r\n}\r\n\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionType):\r\n    Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(f => f.id !== action.todolistID)\r\n        }\r\n\r\n        case \"ADD-TODOLIST\": {\r\n            let newTodolist: TodolistDomainType = {...action.todolist, filter: \"all\"}\r\n            return [newTodolist, ...state]\r\n        }\r\n\r\n        case \"CHANGE-FILTER-TODOLIST\": {\r\n            return state.map(m => m.id === action.todolistID ? {...m, filter: action.value} : m)\r\n        }\r\n\r\n        case \"UPDATE-TITLE-TODOLIST\": {\r\n            return state.map(m => m.id === action.todolistID ? {...m, title: action.title} : m)\r\n        }\r\n\r\n        case \"SET-TODOLISTS\": {\r\n            return action.todolists.map(m => ({...m, filter: \"all\"})\r\n            )\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistID: string): RemoveTodolistAT => {\r\n    return {\r\n        type: \"REMOVE-TODOLIST\",\r\n        todolistID\r\n    }\r\n}\r\n\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {\r\n        type: \"ADD-TODOLIST\",\r\n        todolist\r\n    } as const\r\n}\r\n\r\nexport const changeFilterAC = (value: filterType, todolistID: string): ChangeFilterAT => {\r\n    return {\r\n        type: \"CHANGE-FILTER-TODOLIST\",\r\n        value,\r\n        todolistID\r\n    }\r\n}\r\n\r\nexport const updateTitleTodolistAC = (todolistID: string, title: string): UpdateTitleTodolistAT => {\r\n    return {\r\n        type: \"UPDATE-TITLE-TODOLIST\",\r\n        title,\r\n        todolistID\r\n    }\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {\r\n        type: \"SET-TODOLISTS\",\r\n        todolists\r\n    } as const\r\n}\r\n\r\nexport const setTodolistsTC = () => (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n    todolistApi.getTodos()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistApi.deleteTodo(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistApi.createTodo(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const updateTitleTodolistTC = (title: string, todolistID: string) => (dispatch: Dispatch) => {\r\n    todolistApi.updateTodoTitle(todolistID, title)\r\n        .then(() => {\r\n            dispatch(updateTitleTodolistAC(todolistID, title))\r\n        })\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {\r\n    addTodolistTC, changeFilterAC, filterType, removeTodolistTC, setTodolistsTC,\r\n    TodolistDomainType, updateTitleTodolistTC\r\n} from \"./state/todolistsReducer\";\r\nimport {addTaskTC, changeStatusTC, removeTaskTC, updateTaskTitleTC} from \"./state/taskReducer\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TaskStatuses} from \"./api/todolist-api\";\r\nimport {TasksStateType} from \"./App\";\r\nimport Paper from '@material-ui/core/Paper'\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\n\r\nexport const AppWithRedux = () => {\r\n\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistID: string) => {\r\n        // dispatch(removeTaskTC(todolistID, id))\r\n        // // const action = removeTaskAC(id, todolistID);\r\n        dispatch(removeTaskTC(todolistID, id));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistID: string) => {\r\n        dispatch(addTaskTC(todolistID, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((todolistID: string, id: string, status: TaskStatuses) => {\r\n        dispatch(changeStatusTC(todolistID, id, status))\r\n        // dispatch(changeStatusTaskAC(todolistID, id, status))\r\n    }, [dispatch])\r\n\r\n    const updateTask = useCallback((todolistID: string, id: string, title: string) => {\r\n        dispatch(updateTaskTitleTC(todolistID, id, title))\r\n        // dispatch(changeTitleTaskAC(title, id, todolistID))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: filterType, todolistID: string) => {\r\n        dispatch(changeFilterAC(value, todolistID))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n        // let action = addTodolistAC(title)\r\n        // dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const updateTitleTodolist = useCallback((title: string, todolistID: string) => {\r\n        dispatch(updateTitleTodolistTC(title, todolistID))\r\n        // dispatch(updateTitleTodolistAC(title, todolistID))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistID: string) => {\r\n        dispatch(removeTodolistTC(todolistID))\r\n        // dispatch(removeTodolistAC(todolistID))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm callBack={addTodolist}/>\r\n            {todolists.map(m => {\r\n\r\n                    return (\r\n                        <Grid item key={m.id} style={{paddingTop: '10px'}}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    todolistID={m.id}\r\n                                    key={m.id}\r\n                                    title={m.title}\r\n                                    tasks={tasks[m.id]}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeStatus={changeStatus}\r\n                                    filter={m.filter}\r\n                                    updateTask={updateTask}\r\n                                    updateTitleTodolist={updateTitleTodolist}\r\n                                    removeTodolist={removeTodolist}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>)\r\n                }\r\n            )\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n","import {tasksReducer} from './taskReducer';\r\nimport {todolistsReducer} from './todolistsReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithRedux} from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}