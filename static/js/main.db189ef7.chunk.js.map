{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","app/app-reducer.ts","utils/error-utils.ts","state/todolistsReducer.ts","state/taskReducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","put","taskId","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","handleServerNetworkError","dispatch","message","handleServerAppError","data","messages","length","AddItemForm","React","memo","props","useState","setTitle","setError","TextField","id","label","variant","size","helperText","value","onChange","e","currentTarget","onKeyPress","key","trim","callBack","className","disabled","entityStatus","IconButton","color","onClick","onClickAddTaskHandler","AddBox","EditableSpan","editMode","setEditMode","titleInput","setTitleInput","autoFocus","onBlur","onDoubleClick","Task","task","removeTask","changeStatus","updateTask","Completed","checked","newIsDoneValue","New","onChangeStatusHandler","updateTaskHandler","aria-label","Delete","Todolist","useDispatch","useEffect","todolistID","then","res","tasks","items","setTasksAC","catch","changeFilterOnClickHandler","useCallback","changeFilter","addTaskHandler","addTask","tasksForTodolist","filter","f","updateTitleTodolist","removeTodolist","map","t","Button","TodolistsList","todolists","useSelector","state","getState","resultCode","item","addTaskAC","addTaskTC","currentTask","find","description","priority","deadline","startDate","changeStatusTaskAC","changeStatusTC","changeTitleTaskAC","updateTaskTitleTC","changeFilterAC","addTodolist","todolist","addTodolistTC","updateTitleTodolistAC","updateTitleTodolistTC","removeTodolistAC","Container","fixed","Grid","container","style","padding","spacing","m","Paper","width","display","margin","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","rootReducer","combineReducers","action","todoListId","newState","copyState","forEach","tl","newTodolist","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.db189ef7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3ffd8bee-6a2a-4b2d-9367-b8070697f4c5'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})\r\n\r\n//api\r\nexport const todolistApi = {\r\n    getTodos() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\")\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<BaseTodolistType<{ item: TodolistType }>>(\"todo-lists\", {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<BaseTodolistType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<BaseTodolistType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTaskResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<BaseTaskType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateModelTaskType) {\r\n        return instance.put<BaseTaskType<{ item: UpdateModelTaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`,\r\n            model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<BaseTaskType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type BaseTodolistType<T = {}> = {\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    resultCode: number\r\n    data: T\r\n}\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type GetTaskResponseType = {\r\n    items: Array<TaskType>\r\n    error: null | string\r\n    totalCount: number\r\n}\r\nexport type UpdateModelTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\ntype BaseTaskType<T = {}> = {\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    resultCode: number\r\n    data: T\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// type CreateTaskType = {\r\n//     fieldsErrors: Array<string>\r\n//     messages: Array<string>\r\n//     resultCode: number\r\n//     data: { item: TaskType }\r\n// }\r\n//\r\n// type UpdateTaskType = {\r\n//     fieldsErrors: Array<string>\r\n//     messages: Array<string>\r\n//     resultCode: number\r\n//     data: { item: UpdateModelTaskType }\r\n// }\r\n//\r\n// type DeleteTaskType = {\r\n//     fieldsErrors: Array<string>\r\n//     messages: Array<string>\r\n//     resultCode: number\r\n//     data: {}\r\n// }\r\n\r\n\r\n\r\n","const initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as NullableType<string>\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppReducerActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: \"APP/SET-STATUS\",\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: \"APP/SET-ERROR\",\r\n        error\r\n    } as const\r\n}\r\n\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type NullableType<T> = null | T\r\n\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\nexport type AppReducerActionsType = SetAppStatusType | SetAppErrorType","import {setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {BaseTodolistType} from \"../api/todolist-api\";\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<SetAppStatusType|SetAppErrorType>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch<SetAppStatusType|SetAppErrorType>, data: BaseTodolistType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n","import {todolistApi, TodolistType} from \"../api/todolist-api\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionType):\r\n    Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(f => f.id !== action.todolistID)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            let newTodolist: TodolistDomainType = {...action.todolist, filter: \"all\", entityStatus: \"idle\"}\r\n            return [newTodolist, ...state]\r\n        }\r\n        case \"CHANGE-FILTER-TODOLIST\": {\r\n            return state.map(m => m.id === action.todolistID ? {...m, filter: action.value} : m)\r\n        }\r\n        case \"UPDATE-TITLE-TODOLIST\": {\r\n            return state.map(m => m.id === action.todolistID ? {...m, title: action.title} : m)\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            return action.todolists.map(m => ({...m, filter: \"all\", entityStatus: \"idle\"})\r\n            )\r\n        }\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\": {\r\n            return state.map(m => m.id === action.todolistID ? {...m, entityStatus:\r\n                action.entityStatus} : m)\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const removeTodolistAC = (todolistID: string) => {\r\n    return {\r\n        type: \"REMOVE-TODOLIST\",\r\n        todolistID\r\n    } as const\r\n}\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {\r\n        type: \"ADD-TODOLIST\",\r\n        todolist\r\n    } as const\r\n}\r\nexport const changeFilterAC = (value: filterType, todolistID: string) => {\r\n    return {\r\n        type: \"CHANGE-FILTER-TODOLIST\",\r\n        value,\r\n        todolistID\r\n    } as const\r\n}\r\nexport const updateTitleTodolistAC = (todolistID: string, title: string) => {\r\n    return {\r\n        type: \"UPDATE-TITLE-TODOLIST\",\r\n        title,\r\n        todolistID\r\n    } as const\r\n}\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {\r\n        type: \"SET-TODOLISTS\",\r\n        todolists\r\n    } as const\r\n}\r\n\r\nexport const changeTodolistEntityStatusAC = (todolistID: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: \"CHANGE-TODOLIST-ENTITY-STATUS\",\r\n        todolistID,\r\n        entityStatus\r\n    } as const\r\n}\r\n\r\n\r\n//thunk\r\nexport const setTodolistsTC = () => (dispatch: Dispatch<TodolistsActionType>, getState: () => AppRootStateType): void => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistApi.getTodos()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<TodolistsActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    todolistApi.deleteTodo(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                dispatch(removeTodolistAC(todolistId))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error)=> {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<TodolistsActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistApi.createTodo(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error)=> {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const updateTitleTodolistTC = (title: string, todolistID: string) =>\r\n    (dispatch: Dispatch<TodolistsActionType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistApi.updateTodoTitle(todolistID, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                    dispatch(updateTitleTodolistAC(todolistID, title))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((error)=> {\r\n                handleServerNetworkError(dispatch, error.message)\r\n            })\r\n    }\r\n\r\n\r\n//types\r\nexport type TodolistsActionType =\r\n    | ReturnType<typeof changeFilterAC>\r\n    | ReturnType<typeof updateTitleTodolistAC>\r\n    | AddTodolistAT\r\n    | RemoveTodolistAT\r\n    | SetTodolistsAT\r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\n\r\nexport type AddTodolistAT = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistAT = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type filterType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: filterType,\r\n    entityStatus: RequestStatusType\r\n}","import {AddTodolistAT, RemoveTodolistAT, SetTodolistsAT} from \"./todolistsReducer\";\r\nimport {TaskStatuses, TaskType, todolistApi, UpdateModelTaskType} from \"../api/todolist-api\";\r\nimport {TasksStateType} from \"../trash/App\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            return ({...state, [action.todolistID]: state[action.todolistID].filter(f => f.id !== action.id)})\r\n        }\r\n        case \"ADD-TASK\": {\r\n            return ({...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]})\r\n        }\r\n        case \"CHANGE-STATUS-TASK\": {\r\n            return {\r\n                ...state, [action.todolistID]: state[action.todolistID].map\r\n                (m => m.id === action.id ? {...m, status: action.status} : m)\r\n            }\r\n        }\r\n        case \"CHANGE-TITLE-TASK\": {\r\n            return ({\r\n                ...state, [action.todolistID]: state[action.todolistID].map\r\n                (m => m.id === action.id ? {...m, title: action.title} : m)\r\n            })\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.todolist.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let newState = {...state}\r\n            delete newState[action.todolistID]\r\n            return newState\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                return (\r\n                    copyState[tl.id] = []\r\n                )\r\n            })\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\": {\r\n            let copyState = {...state}\r\n            copyState[action.todolistId] = action.tasks\r\n            return copyState\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTaskAC = (id: string, todolistID: string) => {\r\n    return {\r\n        type: \"REMOVE-TASK\",\r\n        id,\r\n        todolistID\r\n    } as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: \"ADD-TASK\",\r\n        task\r\n    } as const\r\n}\r\nexport const changeStatusTaskAC = (todolistID: string, id: string, status: TaskStatuses) => {\r\n    return {\r\n        type: \"CHANGE-STATUS-TASK\",\r\n        status,\r\n        id,\r\n        todolistID\r\n    } as const\r\n}\r\nexport const changeTitleTaskAC = (todolistID: string, id: string, title: string) => {\r\n    return {\r\n        type: \"CHANGE-TITLE-TASK\",\r\n        todolistID,\r\n        id,\r\n        title\r\n    } as const\r\n}\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: \"SET-TASKS\",\r\n        todolistId,\r\n        tasks\r\n    } as const\r\n}\r\n\r\n\r\n//thunk\r\nexport const setTasksTC = (todolistId: string) => (dispatch: Dispatch<TasksActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistApi.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n            let tasks = res.data.items\r\n            dispatch(setTasksAC(todolistId, tasks))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<TasksActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistApi.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<TasksActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistApi.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                let task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const updateTaskTitleTC = (todolistId: string, taskId: string, title: string) =>\r\n    (dispatch: Dispatch<TasksActionType>, getState: () => AppRootStateType) => {\r\n        let currentTask = getState().tasks[todolistId].find(f => (f.id === taskId ? taskId : \"\"))\r\n        if (currentTask) {\r\n            const model: UpdateModelTaskType = {\r\n                title: title,\r\n                description: currentTask.description,\r\n                status: currentTask.status,\r\n                priority: currentTask.priority,\r\n                deadline: currentTask.deadline,\r\n                startDate: currentTask.startDate\r\n            }\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            todolistApi.updateTask(todolistId, taskId, model)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(setAppStatusAC(\"succeeded\"))\r\n                        dispatch(changeTitleTaskAC(todolistId, taskId, title))\r\n                    } else {\r\n                        handleServerAppError(dispatch, res.data)\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(dispatch, error.message)\r\n                })\r\n        }\r\n    }\r\nexport const changeStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch<TasksActionType>, getState: () => AppRootStateType) => {\r\n\r\n        let currentTask = getState().tasks[todolistId].find(f => (f.id === taskId ? taskId : \"\"))\r\n        if (currentTask) {\r\n            const model: UpdateModelTaskType = {\r\n                title: currentTask.title,\r\n                description: currentTask.description,\r\n                status: status,\r\n                priority: currentTask.priority,\r\n                deadline: currentTask.deadline,\r\n                startDate: currentTask.startDate\r\n            }\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            todolistApi.updateTask(todolistId, taskId, model)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(setAppStatusAC(\"succeeded\"))\r\n                        dispatch(changeStatusTaskAC(todolistId, taskId, status))\r\n                    } else {\r\n                        handleServerAppError(dispatch, res.data)\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(dispatch, error.message)\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n//types\r\ntype TasksActionType =\r\n    | AddTodolistAT\r\n    | RemoveTodolistAT\r\n    | SetTodolistsAT\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeStatusTaskAC>\r\n    | ReturnType<typeof changeTitleTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n","import {Button, TextField} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (title: string) => void\r\n    entityStatus?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    let [error, setError] = useState<null | string>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) setError(\"\")\r\n        if (e.key === \"Enter\" && title.trim() !== \"\") {\r\n            props.callBack(title)\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n\r\n    const onClickAddTaskHandler = (title: string) => {\r\n        if (title.trim() !== \"\") {\r\n            props.callBack(title)\r\n            setTitle(\"\")\r\n        }\r\n        else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<input*/}\r\n            {/*    value={title}*/}\r\n            {/*    onChange={onChangeHandler}*/}\r\n            {/*    onKeyPress={onKeyPressHandler}*/}\r\n            {/*    className={error ? 'error' : \"\"}*/}\r\n            {/*/>*/}\r\n\r\n            <TextField id=\"outlined-basic\"\r\n                       label=\"Title\"\r\n                       variant=\"outlined\"\r\n                       size=\"small\"\r\n                       helperText={error}\r\n                       error={!!error}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={error ? 'error' : \"\"}\r\n                       disabled={props.entityStatus}\r\n            />\r\n\r\n            {/*<button onClick={() => onClickAddTaskHandler(title)}>+</button>*/}\r\n            {/*<Button*/}\r\n            {/*    disabled={props.entityStatus}*/}\r\n            {/*    variant=\"outlined\"*/}\r\n            {/*    style={{maxWidth: \"30px\", maxHeight: \"30px\", minWidth: \"30px\", minHeight: \"30px\"}}*/}\r\n            {/*    onClick={() => onClickAddTaskHandler(title)}>+</Button>*/}\r\n            <IconButton color=\"primary\"\r\n                        onClick={() => onClickAddTaskHandler(title)}\r\n                        disabled={props.entityStatus}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{error ? <div className='error-message'>{error}</div> : \"\"}*/}\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [titleInput, setTitleInput] = useState(props.title)\r\n\r\n    const editModeTrueHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const editModeFalseHandler = () => {\r\n        setEditMode(false)\r\n        props.callBack(titleInput)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitleInput(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.callBack(titleInput)\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input value={titleInput}\r\n                     onChange={onChangeHandler}\r\n                     autoFocus\r\n                     onBlur={editModeFalseHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n\r\n            />\r\n            : <span onDoubleClick={editModeTrueHandler}>{props.title}</span>\r\n\r\n    )\r\n})","import {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\n\r\ntype TasksPropsType = {\r\n    task: TaskType\r\n    removeTask: (id: string) => void\r\n    changeStatus: (status: TaskStatuses, id: string) => void\r\n    updateTask: (id: string, title: string) => void\r\n\r\n}\r\n\r\nexport const Task = React.memo(({task, removeTask, changeStatus, updateTask}: TasksPropsType) => {\r\n\r\n    const onClickRemoveTask = (id: string) => {\r\n        removeTask(id)\r\n    }\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>, id: string) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeStatus(newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, id)\r\n    }\r\n\r\n    const updateTaskHandler = (id: string, title: string) => {\r\n        updateTask(id, title)\r\n    }\r\n\r\n    return (\r\n        <li key={task.id}>\r\n\r\n            <input\r\n                className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n                type=\"checkbox\"\r\n                checked={task.status === TaskStatuses.Completed}\r\n                onChange={(e) => onChangeStatusHandler(e, task.id)}\r\n\r\n            />\r\n\r\n\r\n            <EditableSpan title={task.title} callBack={(title: string) => updateTaskHandler(task.id, title)}/>\r\n            {/*<button onClick={() => onClickRemoveTask(task.id)}>X</button>*/}\r\n            <IconButton aria-label=\"delete\">\r\n                <Delete onClick={() => onClickRemoveTask(task.id)}/>\r\n            </IconButton>\r\n\r\n        </li>)\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {filterType} from \"../../../state/todolistsReducer\";\r\nimport {setTasksTC} from \"../../../state/taskReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\nexport type TodolistPropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeFilter: (value: filterType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeStatus: (todolistID: string, id: string, status: TaskStatuses) => void\r\n    filter: filterType\r\n    todolistID: string\r\n    updateTask: (todolistID: string, id: string, title: string) => void\r\n    updateTitleTodolist: (title: string, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(props.todolistID))\r\n    }, [])\r\n\r\n    const changeFilterOnClickHandler = useCallback((value: filterType, todolistID: string) => {\r\n        props.changeFilter(value, todolistID)\r\n    }, [props.changeFilter])\r\n\r\n    // let [error, setError]=useState<null | string>(null)\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        props.addTask(title, props.todolistID)\r\n    }, [props.addTask, props.todolistID])\r\n\r\n    const updateTitleTodolistHandler = (title: string) => {\r\n        props.updateTitleTodolist(title, props.todolistID)\r\n    }\r\n\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.todolistID)\r\n    }\r\n\r\n    const removeTask = useCallback((id: string) => {\r\n        props.removeTask(id, props.todolistID)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((status: TaskStatuses, id: string) => {\r\n        props.changeStatus(props.todolistID, id, status)\r\n    }, [])\r\n\r\n    const updateTask = useCallback((id: string, title: string) => {\r\n        props.updateTask(props.todolistID, id, title)\r\n    }, [])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => TaskStatuses.New)\r\n    }\r\n\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h3>\r\n                <EditableSpan title={props.title} callBack={updateTitleTodolistHandler}/>\r\n\r\n                <IconButton aria-label=\"delete\" disabled={props.entityStatus===\"loading\"}>\r\n                    <Delete onClick={removeTodolistHandler}/>\r\n                </IconButton>\r\n                {/*<button onClick={removeTodolistHandler}>X</button>*/}\r\n                {/*{props.title}*/}\r\n            </h3>\r\n\r\n            <AddItemForm callBack={addTaskHandler} entityStatus={props.entityStatus===\"loading\"}/>\r\n\r\n            <ul>\r\n                {tasksForTodolist.map(t => <Task\r\n                    key={t.id}\r\n                    task={t}\r\n                    removeTask={removeTask}\r\n                    changeStatus={changeStatus}\r\n                    updateTask={updateTask}\r\n                />)\r\n\r\n                }\r\n            </ul>\r\n\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                        onClick={() => changeFilterOnClickHandler('all', props.todolistID)}>\r\n                    All\r\n                </Button>\r\n                <Button variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        onClick={() => changeFilterOnClickHandler('active', props.todolistID)}>\r\n                    Active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        onClick={() => changeFilterOnClickHandler('completed', props.todolistID)}>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeFilterAC,\r\n    filterType, removeTodolistTC,\r\n    setTodolistsTC,\r\n    TodolistDomainType, updateTitleTodolistTC\r\n} from \"../../state/todolistsReducer\";\r\nimport {TasksStateType} from \"../../trash/App\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {addTaskTC, changeStatusTC, removeTaskTC, updateTaskTitleTC} from \"../../state/taskReducer\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Container, Grid, Toolbar, Typography} from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {Box} from \"@mui/material\";\r\nimport classes from \"./TodolistsList.module.css\";\r\n\r\nexport const TodolistsList = () => {\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistID: string) => {\r\n        // dispatch(removeTaskTC(todolistID, id))\r\n        // // const action = removeTaskAC(id, todolistID);\r\n        dispatch(removeTaskTC(todolistID, id));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistID: string) => {\r\n        dispatch(addTaskTC(todolistID, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((todolistID: string, id: string, status: TaskStatuses) => {\r\n        dispatch(changeStatusTC(todolistID, id, status))\r\n        // dispatch(changeStatusTaskAC(todolistID, id, status))\r\n    }, [dispatch])\r\n\r\n    const updateTask = useCallback((todolistID: string, id: string, title: string) => {\r\n        dispatch(updateTaskTitleTC(todolistID, id, title))\r\n        // dispatch(changeTitleTaskAC(title, id, todolistID))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: filterType, todolistID: string) => {\r\n        dispatch(changeFilterAC(value, todolistID))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n        // let action = addTodolistAC(title)\r\n        // dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const updateTitleTodolist = useCallback((title: string, todolistID: string) => {\r\n        dispatch(updateTitleTodolistTC(title, todolistID))\r\n        // dispatch(updateTitleTodolistAC(title, todolistID))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistID: string) => {\r\n        dispatch(removeTodolistTC(todolistID))\r\n        // dispatch(removeTodolistAC(todolistID))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Container fixed>\r\n\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map(m => {\r\n\r\n                            return (\r\n                                // <div className={classes.todo}>\r\n                                    <Grid item key={m.id}>\r\n                                        <Paper style={{padding: '10px', width: '300px', display:\"flex-row\", margin: \"20px\"}}>\r\n                                            <Todolist\r\n                                                todolistID={m.id}\r\n                                                key={m.id}\r\n                                                title={m.title}\r\n                                                entityStatus={m.entityStatus}\r\n                                                tasks={tasks[m.id]}\r\n                                                removeTask={removeTask}\r\n                                                changeFilter={changeFilter}\r\n                                                addTask={addTask}\r\n                                                changeStatus={changeStatus}\r\n                                                filter={m.filter}\r\n                                                updateTask={updateTask}\r\n                                                updateTitleTodolist={updateTitleTodolist}\r\n                                                removeTodolist={removeTodolist}\r\n                                            />\r\n                                        </Paper>\r\n                                    </Grid>\r\n                                // </div>\r\n                            )\r\n                        }\r\n                    )\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import {Snackbar} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {AlertProps} from \"@mui/material\";\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    // eslint-disable-next-line react/jsx-no-undef\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state=> state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport {Toolbar, Typography} from \"@material-ui/core\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {Button} from \"@mui/material\";\r\n\r\n\r\n\r\n\r\nexport const App = () => {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state=> state.app.status)\r\n\r\n    return (\r\n        <div >\r\n            <ErrorSnackbar/>\r\n            {/*<Box sx={{flexGrow: 1}}>*/}\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" >\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" >\r\n\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            {/*</Box>*/}\r\n\r\n            {status===\"loading\" && <LinearProgress color=\"secondary\" />}\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import {tasksReducer} from './taskReducer';\r\nimport {todolistsReducer} from './todolistsReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//все типы actions для всего App\r\n// export type AppActionsType = TodolistsActionType | TasksActionType | AppReducerActionsType\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}