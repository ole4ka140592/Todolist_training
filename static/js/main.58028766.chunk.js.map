{"version":3,"sources":["features/Login/Login.module.css","serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/loginReducer.ts","app/app-reducer.ts","state/todolistsReducer.ts","state/taskReducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","state/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","put","taskId","model","data","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleServerAppError","messages","length","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","AddItemForm","React","memo","props","useState","setTitle","setError","TextField","id","label","variant","size","helperText","onChange","e","currentTarget","onKeyPress","key","trim","callBack","className","disabled","entityStatus","IconButton","color","onClick","onClickAddTaskHandler","AddBox","EditableSpan","editMode","setEditMode","titleInput","setTitleInput","autoFocus","onBlur","onDoubleClick","Task","task","removeTask","changeStatus","updateTask","Completed","checked","newIsDoneValue","New","onChangeStatusHandler","updateTaskHandler","aria-label","Delete","Todolist","useDispatch","useEffect","todolistID","then","res","tasks","items","setTasksAC","catch","changeFilterOnClickHandler","useCallback","changeFilter","addTaskHandler","addTask","tasksForTodolist","filter","f","updateTitleTodolist","removeTodolist","map","t","Button","TodolistsList","todolists","useSelector","state","login","getState","resultCode","item","addTaskAC","addTaskTC","currentTask","find","description","priority","deadline","startDate","changeStatusTaskAC","changeStatusTC","changeTitleTaskAC","updateTaskTitleTC","changeFilterAC","addTodolist","todolist","addTodolistTC","updateTitleTodolistAC","updateTitleTodolistTC","removeTodolistAC","Container","fixed","Grid","container","style","padding","spacing","m","Paper","width","display","margin","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","name","handleChange","handleBlur","touched","classes","FormControlLabel","control","Checkbox","App","finally","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","path","element","rootReducer","combineReducers","action","todoListId","newState","copyState","forEach","tl","newTodolist","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.58028766.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__22fPE\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '0ab1e7b3-e560-4134-9877-af2e3009657c'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})\r\n\r\n//api\r\nexport const todolistApi = {\r\n    getTodos() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\")\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<BaseTodolistType<{ item: TodolistType }>>(\"todo-lists\", {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<BaseTodolistType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<BaseTodolistType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTaskResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<BaseTaskType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateModelTaskType) {\r\n        return instance.put<BaseTaskType<{ item: UpdateModelTaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`,\r\n            model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<BaseTaskType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<BaseTaskType<{ userId: number }>>(\"auth/login\", data)\r\n    },\r\n    me() {\r\n        return instance.get<BaseTaskType<MeResponseType>>(\"auth/me\")\r\n    },\r\n    logout() {\r\n        return instance.delete<BaseTaskType<LogoutDeleteType>>(\"auth/login\")\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string\r\n}\r\n\r\ntype LogoutDeleteType = {\r\n    resultCode: number,\r\n    messages: string[],\r\n    data: {}\r\n}\r\n\r\ntype MeResponseType = {\r\n    resultCode: number\r\n    messages: string[],\r\n    data: {\r\n        id: number,\r\n        email: string,\r\n        login: string\r\n    }\r\n}\r\n\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type BaseTodolistType<T = {}> = {\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    resultCode: number\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type GetTaskResponseType = {\r\n    items: Array<TaskType>\r\n    error: null | string\r\n    totalCount: number\r\n}\r\nexport type UpdateModelTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\ntype BaseTaskType<T = {}> = {\r\n    fieldsErrors: Array<string>\r\n    messages: Array<string>\r\n    resultCode: number\r\n    data: T\r\n}\r\n\r\n\r\n// type CreateTaskType = {\r\n//     fieldsErrors: Array<string>\r\n//     messages: Array<string>\r\n//     resultCode: number\r\n//     data: { item: TaskType }\r\n// }\r\n//\r\n// type UpdateTaskType = {\r\n//     fieldsErrors: Array<string>\r\n//     messages: Array<string>\r\n//     resultCode: number\r\n//     data: { item: UpdateModelTaskType }\r\n// }\r\n//\r\n// type DeleteTaskType = {\r\n//     fieldsErrors: Array<string>\r\n//     messages: Array<string>\r\n//     resultCode: number\r\n//     data: {}\r\n// }\r\n\r\n\r\n\r\n","import {setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {BaseTodolistType} from \"../api/todolist-api\";\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<SetAppStatusType|SetAppErrorType>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch<SetAppStatusType|SetAppErrorType>, data: BaseTodolistType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n","import { Dispatch } from 'redux'\r\nimport {SetAppErrorType, setAppStatusAC, SetAppStatusType} from '../../app/app-reducer'\r\nimport {todolistApi} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n            dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                dispatch(setIsLoggedInAC(false))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n","import {Dispatch} from \"redux\";\r\nimport {todolistApi} from \"../api/todolist-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/loginReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as NullableType<string>,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppReducerActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n\r\n        case \"APP/SET-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: \"APP/SET-STATUS\",\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => {\r\n    return {\r\n        type: \"APP/SET-ERROR\",\r\n        error\r\n    } as const\r\n}\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {\r\n        type: \"APP/SET-INITIALIZED\",\r\n        isInitialized\r\n    } as const\r\n}\r\n\r\n\r\n// thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                dispatch(setIsLoggedInAC(true));\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n                handleServerNetworkError(dispatch, error.message)\r\n            })\r\n        .finally(()=> {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type NullableType<T> = null | T\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitializedType = ReturnType<typeof setIsInitializedAC>\r\nexport type AppReducerActionsType = SetAppStatusType | SetAppErrorType | SetIsInitializedType","import {todolistApi, TodolistType} from \"../api/todolist-api\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionType):\r\n    Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(f => f.id !== action.todolistID)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            let newTodolist: TodolistDomainType = {...action.todolist, filter: \"all\", entityStatus: \"idle\"}\r\n            return [newTodolist, ...state]\r\n        }\r\n        case \"CHANGE-FILTER-TODOLIST\": {\r\n            return state.map(m => m.id === action.todolistID ? {...m, filter: action.value} : m)\r\n        }\r\n        case \"UPDATE-TITLE-TODOLIST\": {\r\n            return state.map(m => m.id === action.todolistID ? {...m, title: action.title} : m)\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            return action.todolists.map(m => ({...m, filter: \"all\", entityStatus: \"idle\"})\r\n            )\r\n        }\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\": {\r\n            return state.map(m => m.id === action.todolistID ? {...m, entityStatus:\r\n                action.entityStatus} : m)\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const removeTodolistAC = (todolistID: string) => {\r\n    return {\r\n        type: \"REMOVE-TODOLIST\",\r\n        todolistID\r\n    } as const\r\n}\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {\r\n        type: \"ADD-TODOLIST\",\r\n        todolist\r\n    } as const\r\n}\r\nexport const changeFilterAC = (value: filterType, todolistID: string) => {\r\n    return {\r\n        type: \"CHANGE-FILTER-TODOLIST\",\r\n        value,\r\n        todolistID\r\n    } as const\r\n}\r\nexport const updateTitleTodolistAC = (todolistID: string, title: string) => {\r\n    return {\r\n        type: \"UPDATE-TITLE-TODOLIST\",\r\n        title,\r\n        todolistID\r\n    } as const\r\n}\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => {\r\n    return {\r\n        type: \"SET-TODOLISTS\",\r\n        todolists\r\n    } as const\r\n}\r\n\r\nexport const changeTodolistEntityStatusAC = (todolistID: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: \"CHANGE-TODOLIST-ENTITY-STATUS\",\r\n        todolistID,\r\n        entityStatus\r\n    } as const\r\n}\r\n\r\n\r\n//thunk\r\nexport const setTodolistsTC = () => (dispatch: Dispatch<TodolistsActionType>, getState: () => AppRootStateType): void => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistApi.getTodos()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<TodolistsActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    todolistApi.deleteTodo(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                dispatch(removeTodolistAC(todolistId))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error)=> {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<TodolistsActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistApi.createTodo(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error)=> {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const updateTitleTodolistTC = (title: string, todolistID: string) =>\r\n    (dispatch: Dispatch<TodolistsActionType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistApi.updateTodoTitle(todolistID, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                    dispatch(updateTitleTodolistAC(todolistID, title))\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((error)=> {\r\n                handleServerNetworkError(dispatch, error.message)\r\n            })\r\n    }\r\n\r\n\r\n//types\r\nexport type TodolistsActionType =\r\n    | ReturnType<typeof changeFilterAC>\r\n    | ReturnType<typeof updateTitleTodolistAC>\r\n    | AddTodolistAT\r\n    | RemoveTodolistAT\r\n    | SetTodolistsAT\r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n    | ChangeTodolistEntityStatusType\r\nexport type AddTodolistAT = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistAT = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type filterType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: filterType,\r\n    entityStatus: RequestStatusType\r\n}","import {AddTodolistAT, RemoveTodolistAT, SetTodolistsAT} from \"./todolistsReducer\";\r\nimport {TaskStatuses, TaskType, todolistApi, UpdateModelTaskType} from \"../api/todolist-api\";\r\nimport {TasksStateType} from \"../trash/App\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {SetAppErrorType, setAppStatusAC, SetAppStatusType} from \"../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            return ({...state, [action.todolistID]: state[action.todolistID].filter(f => f.id !== action.id)})\r\n        }\r\n        case \"ADD-TASK\": {\r\n            return ({...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]})\r\n        }\r\n        case \"CHANGE-STATUS-TASK\": {\r\n            return {\r\n                ...state, [action.todolistID]: state[action.todolistID].map\r\n                (m => m.id === action.id ? {...m, status: action.status} : m)\r\n            }\r\n        }\r\n        case \"CHANGE-TITLE-TASK\": {\r\n            return ({\r\n                ...state, [action.todolistID]: state[action.todolistID].map\r\n                (m => m.id === action.id ? {...m, title: action.title} : m)\r\n            })\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.todolist.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let newState = {...state}\r\n            delete newState[action.todolistID]\r\n            return newState\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            let copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                return (\r\n                    copyState[tl.id] = []\r\n                )\r\n            })\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\": {\r\n            let copyState = {...state}\r\n            copyState[action.todolistId] = action.tasks\r\n            return copyState\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//actions\r\nexport const removeTaskAC = (id: string, todolistID: string) => {\r\n    return {\r\n        type: \"REMOVE-TASK\",\r\n        id,\r\n        todolistID\r\n    } as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: \"ADD-TASK\",\r\n        task\r\n    } as const\r\n}\r\nexport const changeStatusTaskAC = (todolistID: string, id: string, status: TaskStatuses) => {\r\n    return {\r\n        type: \"CHANGE-STATUS-TASK\",\r\n        status,\r\n        id,\r\n        todolistID\r\n    } as const\r\n}\r\nexport const changeTitleTaskAC = (todolistID: string, id: string, title: string) => {\r\n    return {\r\n        type: \"CHANGE-TITLE-TASK\",\r\n        todolistID,\r\n        id,\r\n        title\r\n    } as const\r\n}\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: \"SET-TASKS\",\r\n        todolistId,\r\n        tasks\r\n    } as const\r\n}\r\n\r\n\r\n//thunk\r\nexport const setTasksTC = (todolistId: string) => (dispatch: Dispatch<TasksActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistApi.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n            let tasks = res.data.items\r\n            dispatch(setTasksAC(todolistId, tasks))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<TasksActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistApi.deleteTask(todolistId, taskId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<TasksActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistApi.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                let task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\nexport const updateTaskTitleTC = (todolistId: string, taskId: string, title: string) =>\r\n    (dispatch: Dispatch<TasksActionType>, getState: () => AppRootStateType) => {\r\n        let currentTask = getState().tasks[todolistId].find(f => (f.id === taskId ? taskId : \"\"))\r\n        if (currentTask) {\r\n            const model: UpdateModelTaskType = {\r\n                title: title,\r\n                description: currentTask.description,\r\n                status: currentTask.status,\r\n                priority: currentTask.priority,\r\n                deadline: currentTask.deadline,\r\n                startDate: currentTask.startDate\r\n            }\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            todolistApi.updateTask(todolistId, taskId, model)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(setAppStatusAC(\"succeeded\"))\r\n                        dispatch(changeTitleTaskAC(todolistId, taskId, title))\r\n                    } else {\r\n                        handleServerAppError(dispatch, res.data)\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(dispatch, error.message)\r\n                })\r\n        }\r\n    }\r\nexport const changeStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch<TasksActionType>, getState: () => AppRootStateType) => {\r\n\r\n        let currentTask = getState().tasks[todolistId].find(f => (f.id === taskId ? taskId : \"\"))\r\n        if (currentTask) {\r\n            const model: UpdateModelTaskType = {\r\n                title: currentTask.title,\r\n                description: currentTask.description,\r\n                status: status,\r\n                priority: currentTask.priority,\r\n                deadline: currentTask.deadline,\r\n                startDate: currentTask.startDate\r\n            }\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            todolistApi.updateTask(todolistId, taskId, model)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(setAppStatusAC(\"succeeded\"))\r\n                        dispatch(changeStatusTaskAC(todolistId, taskId, status))\r\n                    } else {\r\n                        handleServerAppError(dispatch, res.data)\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(dispatch, error.message)\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n//types\r\ntype TasksActionType =\r\n    | AddTodolistAT\r\n    | RemoveTodolistAT\r\n    | SetTodolistsAT\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeStatusTaskAC>\r\n    | ReturnType<typeof changeTitleTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n","import {TextField} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (title: string) => void\r\n    entityStatus?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    let [error, setError] = useState<null | string>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) setError(\"\")\r\n        if (e.key === \"Enter\" && title.trim() !== \"\") {\r\n            props.callBack(title)\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n\r\n    const onClickAddTaskHandler = (title: string) => {\r\n        if (title.trim() !== \"\") {\r\n            props.callBack(title)\r\n            setTitle(\"\")\r\n        }\r\n        else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField id=\"outlined-basic\"\r\n                       label=\"Title\"\r\n                       variant=\"outlined\"\r\n                       size=\"small\"\r\n                       helperText={error}\r\n                       error={!!error}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={error ? 'error' : \"\"}\r\n                       disabled={props.entityStatus}\r\n            />\r\n            <IconButton color=\"primary\"\r\n                        onClick={() => onClickAddTaskHandler(title)}\r\n                        disabled={props.entityStatus}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [titleInput, setTitleInput] = useState(props.title)\r\n\r\n    const editModeTrueHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const editModeFalseHandler = () => {\r\n        setEditMode(false)\r\n        props.callBack(titleInput)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitleInput(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.callBack(titleInput)\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input value={titleInput}\r\n                     onChange={onChangeHandler}\r\n                     autoFocus\r\n                     onBlur={editModeFalseHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n\r\n            />\r\n            : <span onDoubleClick={editModeTrueHandler}>{props.title}</span>\r\n\r\n    )\r\n})","import {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\n\r\ntype TasksPropsType = {\r\n    task: TaskType\r\n    removeTask: (id: string) => void\r\n    changeStatus: (status: TaskStatuses, id: string) => void\r\n    updateTask: (id: string, title: string) => void\r\n\r\n}\r\n\r\nexport const Task = React.memo(({task, removeTask, changeStatus, updateTask}: TasksPropsType) => {\r\n\r\n    const onClickRemoveTask = (id: string) => {\r\n        removeTask(id)\r\n    }\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>, id: string) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeStatus(newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, id)\r\n    }\r\n\r\n    const updateTaskHandler = (id: string, title: string) => {\r\n        updateTask(id, title)\r\n    }\r\n\r\n    return (\r\n        <li key={task.id}>\r\n\r\n            <input\r\n                className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n                type=\"checkbox\"\r\n                checked={task.status === TaskStatuses.Completed}\r\n                onChange={(e) => onChangeStatusHandler(e, task.id)}\r\n\r\n            />\r\n\r\n\r\n            <EditableSpan title={task.title} callBack={(title: string) => updateTaskHandler(task.id, title)}/>\r\n            {/*<button onClick={() => onClickRemoveTask(task.id)}>X</button>*/}\r\n            <IconButton aria-label=\"delete\">\r\n                <Delete onClick={() => onClickRemoveTask(task.id)}/>\r\n            </IconButton>\r\n\r\n        </li>)\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {filterType} from \"../../../state/todolistsReducer\";\r\nimport {setTasksTC} from \"../../../state/taskReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\nexport type TodolistPropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeFilter: (value: filterType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeStatus: (todolistID: string, id: string, status: TaskStatuses) => void\r\n    filter: filterType\r\n    todolistID: string\r\n    updateTask: (todolistID: string, id: string, title: string) => void\r\n    updateTitleTodolist: (title: string, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(props.todolistID))\r\n    }, [])\r\n\r\n    const changeFilterOnClickHandler = useCallback((value: filterType, todolistID: string) => {\r\n        props.changeFilter(value, todolistID)\r\n    }, [props.changeFilter])\r\n\r\n    // let [error, setError]=useState<null | string>(null)\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        props.addTask(title, props.todolistID)\r\n    }, [props.addTask, props.todolistID])\r\n\r\n    const updateTitleTodolistHandler = (title: string) => {\r\n        props.updateTitleTodolist(title, props.todolistID)\r\n    }\r\n\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.todolistID)\r\n    }\r\n\r\n    const removeTask = useCallback((id: string) => {\r\n        props.removeTask(id, props.todolistID)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((status: TaskStatuses, id: string) => {\r\n        props.changeStatus(props.todolistID, id, status)\r\n    }, [])\r\n\r\n    const updateTask = useCallback((id: string, title: string) => {\r\n        props.updateTask(props.todolistID, id, title)\r\n    }, [])\r\n\r\ndebugger\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => f.status === TaskStatuses.New)\r\n    }\r\ndebugger\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => f.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h3>\r\n                <EditableSpan title={props.title} callBack={updateTitleTodolistHandler}/>\r\n\r\n                <IconButton aria-label=\"delete\" disabled={props.entityStatus===\"loading\"}>\r\n                    <Delete onClick={removeTodolistHandler}/>\r\n                </IconButton>\r\n                {/*<button onClick={removeTodolistHandler}>X</button>*/}\r\n                {/*{props.title}*/}\r\n            </h3>\r\n\r\n            <AddItemForm callBack={addTaskHandler} entityStatus={props.entityStatus===\"loading\"}/>\r\n\r\n            <ul>\r\n                {tasksForTodolist.map(t => <Task\r\n                    key={t.id}\r\n                    task={t}\r\n                    removeTask={removeTask}\r\n                    changeStatus={changeStatus}\r\n                    updateTask={updateTask}\r\n                />)\r\n\r\n                }\r\n            </ul>\r\n\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                        onClick={() => changeFilterOnClickHandler('all', props.todolistID)}>\r\n                    All\r\n                </Button>\r\n                <Button variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        onClick={() => changeFilterOnClickHandler('active', props.todolistID)}>\r\n                    Active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        onClick={() => changeFilterOnClickHandler('completed', props.todolistID)}>\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeFilterAC,\r\n    filterType, removeTodolistTC,\r\n    setTodolistsTC,\r\n    TodolistDomainType, updateTitleTodolistTC\r\n} from \"../../state/todolistsReducer\";\r\nimport {TasksStateType} from \"../../trash/App\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {addTaskTC, changeStatusTC, removeTaskTC, updateTaskTitleTC} from \"../../state/taskReducer\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Container, Grid} from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\nexport const TodolistsList = () => {\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(setTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((id: string, todolistID: string) => {\r\n        // dispatch(removeTaskTC(todolistID, id))\r\n        // // const action = removeTaskAC(id, todolistID);\r\n        dispatch(removeTaskTC(todolistID, id));\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistID: string) => {\r\n        dispatch(addTaskTC(todolistID, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((todolistID: string, id: string, status: TaskStatuses) => {\r\n        dispatch(changeStatusTC(todolistID, id, status))\r\n        // dispatch(changeStatusTaskAC(todolistID, id, status))\r\n    }, [dispatch])\r\n\r\n    const updateTask = useCallback((todolistID: string, id: string, title: string) => {\r\n        dispatch(updateTaskTitleTC(todolistID, id, title))\r\n        // dispatch(changeTitleTaskAC(title, id, todolistID))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: filterType, todolistID: string) => {\r\n        dispatch(changeFilterAC(value, todolistID))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n        // let action = addTodolistAC(title)\r\n        // dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const updateTitleTodolist = useCallback((title: string, todolistID: string) => {\r\n        dispatch(updateTitleTodolistTC(title, todolistID))\r\n        // dispatch(updateTitleTodolistAC(title, todolistID))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistID: string) => {\r\n        dispatch(removeTodolistTC(todolistID))\r\n        // dispatch(removeTodolistAC(todolistID))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Container fixed>\r\n\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map(m => {\r\n\r\n                            return (\r\n                                // <div className={classes.todo}>\r\n                                <Grid item key={m.id}>\r\n                                    <Paper style={{padding: '10px', width: '300px', display: \"flex-row\", margin: \"20px\"}}>\r\n                                        <Todolist\r\n                                            todolistID={m.id}\r\n                                            key={m.id}\r\n                                            title={m.title}\r\n                                            entityStatus={m.entityStatus}\r\n                                            tasks={tasks[m.id]}\r\n                                            removeTask={removeTask}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeStatus={changeStatus}\r\n                                            filter={m.filter}\r\n                                            updateTask={updateTask}\r\n                                            updateTitleTodolist={updateTitleTodolist}\r\n                                            removeTodolist={removeTodolist}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                                // </div>\r\n                            )\r\n                        }\r\n                    )\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import {Snackbar} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {AlertProps} from \"@mui/material\";\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    // eslint-disable-next-line react/jsx-no-undef\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state=> state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport classes from \"./Login.module.css\";\r\nimport {loginTC} from \"./loginReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=> state.login.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password must be 3 or more characters';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free.it.free1@gmail.com</p>\r\n                        <p>Password: 123456789</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   name=\"email\"\r\n                                   onChange={formik.handleChange}\r\n                                   value={formik.values.email}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email\r\n                        && formik.errors.email\r\n                        && <div className={classes.error}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   name=\"password\"\r\n                                   onChange={formik.handleChange}\r\n                                   value={formik.values.password}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password\r\n                        && formik.errors.password\r\n                        && <div className={classes.error}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={\r\n                                              <Checkbox\r\n                                                  onChange={formik.handleChange}\r\n                                                  checked={formik.values.rememberMe}\r\n                                                  name=\"rememberMe\"\r\n                                              />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport {Toolbar, Typography} from \"@material-ui/core\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {Button} from \"@mui/material\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {logoutTC} from \"../features/Login/loginReducer\";\r\n\r\n\r\nexport const App = () => {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=> state.login.isLoggedIn)\r\n\r\n    const onClickLogOut = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <LinearProgress color=\"secondary\"/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                    </Typography>\r\n                    {isLoggedIn\r\n                        ? <Button color=\"inherit\" onClick={onClickLogOut}>LogOut</Button>\r\n                        : <Button color=\"inherit\">Login</Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === \"loading\" && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import {tasksReducer} from './taskReducer';\r\nimport {todolistsReducer} from './todolistsReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\nimport {loginReducer} from \"../features/Login/loginReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    login: loginReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//все типы actions для всего App\r\n// export type AppActionsType = TodolistsActionType | TasksActionType | AppReducerActionsType\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}